


autopep8 is the code formatting module which
is run from the terminal with file name which will auto format and save it

To install we give
pip install --upgrade autopep8

To Change aggressively we give double level of aggression
autopep8 --in-place --aggressive --aggressive <filename>

The most simple way to use the autopep is as module
>>> import autopep8
>>> autopep8.fix_code('x=       123\n')
'x = 123\n'



CODE BEFORE FORMATTING
                import math, sys;

                def example1():
                    ####This is a long comment. This should be wrapped to fit within 72 characters.
                    some_tuple=(   1,2, 3,'a'  );
                    some_variable={'long':'Long code lines should be wrapped within 79 characters.',
                    'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],
                    'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,
                    20,300,40000,500000000,60000000000000000]}}
                    return (some_tuple, some_variable)
                def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));
                class Example3(   object ):
                    def __init__    ( self, bar ):
                    #Comments should have a space after the hash.
                    if bar : bar+=1;  bar=bar* bar   ; return bar
                    else:
                                    some_string = """
                                    Indentation in multiline strings should not be touched.
                Only actual code should be reindented.
                """
                                    return (sys.path, some_string)



WILL BE CONVERTED INTO 
                import math
                import sys


                def example1():
                    # This is a long comment. This should be wrapped to fit within 72
                    # characters.
                    some_tuple = (1, 2, 3, 'a')
                    some_variable = {
                        'long': 'Long code lines should be wrapped within 79 characters.',
                        'other': [
                            math.pi,
                            100,
                            200,
                            300,
                            9876543210,
                            'This is a long string that goes on'],
                        'more': {
                            'inner': 'This whole logical line should be wrapped.',
                            some_tuple: [
                                1,
                                20,
                                300,
                                40000,
                                500000000,
                                60000000000000000]}}
                    return (some_tuple, some_variable)


                def example2(): return ('' in {'f': 2}) in {'has_key() is deprecated': True}


                class Example3(object):
                    def __init__(self, bar):
                        # Comments should have a space after the hash.
                        if bar:
                            bar += 1
                            bar = bar * bar
                            return bar
                        else:
                            some_string = """
                                    Indentation in multiline strings should not be touched.
                Only actual code should be reindented.
                """
                            return (sys.path, some_string)


By default autopep8 only makes whitespace changes. 
Thus, by default, it does not fix E711 and E712. 
(Changing x == None to x is None may change the meaning 
of the program if x has its __eq__ method overridden.) 
Nor does it correct deprecated code W6. 
To enable these more aggressive fixes, use the --aggressive option:


$ autopep8 --aggressive <filename>
Use multiple --aggressive to increase the aggressiveness level. 
For example, E712 requires aggressiveness level 2 (since x == True 
could be changed to either x or x is True, but autopep8 chooses the former).

--aggressive will also shorten lines more aggressively. 
It will also remove trailing whitespace more aggressively. 
(Usually, we don't touch trailing whitespace in docstrings and 
other multiline strings. And to do even more aggressive changes 
to docstrings, use docformatter.)